---
// src/pages/tags/[page].astro
import Layout from '../../layouts/BaseLayout.astro';
import { getAllVideos, type VideoData } from '../../utils/data.ts';
import { slugify } from '../../utils/slugify.ts';
import { desk, nama, url } from '../../utils/site';

export const prerender = true;

// Definisikan jumlah tag per halaman
const TAGS_PER_PAGE = 1000;

// Fungsi filter tags Anda (bisa diletakkan di file utils terpisah jika ingin lebih rapi)
function filterAndSortTags(allVideos: VideoData[]): string[] {
    const uniqueTags = new Set<string>();
    allVideos.forEach(video => {
        if (typeof video.tags === 'string') {
            video.tags.split(',').forEach(tag => {
                const trimmedTag = tag.trim();
                if (trimmedTag.length > 0) {
                    uniqueTags.add(trimmedTag);
                }
            });
        }
    });

    const filteredTags = Array.from(uniqueTags).filter(tag => {
        const lowerCaseTag = tag.toLowerCase();

        const isBokepAndSpecificRandom = /^bokep\s+[\w\d\-]{1,2}$/i.test(lowerCaseTag);
        const isJustBokep = /^bokep$/i.test(lowerCaseTag);
        const isBokepFollowedByNumbers = /^bokep\s+\d+$/i.test(lowerCaseTag);
        const isBokepIrrelevant = isBokepAndSpecificRandom || isJustBokep || isBokepFollowedByNumbers;
        
        const words = lowerCaseTag.split(/\s+/);
        const isSingleLongRandomWord = words.length === 1 && words[0].length > 20;

        const isOnlyNumbers = /^\d+$/.test(lowerCaseTag);
        
        const singleWordShortStopList = new Set([
            'dan', 'atau', 'di', 'ini', 'itu', 'yang',
            'video', 'film', 'movie', 'full', 'gratis', 'online', 'terbaru', 'download',
            'hd', 'mp4', 'xxx', 'free', 'new', 'indo', 'indonesia', 'part', 'episode'
        ]);
        const isSingleWordAndInShortStopList = words.length === 1 && singleWordShortStopList.has(lowerCaseTag);

        return !(
            isBokepIrrelevant ||
            isSingleLongRandomWord ||
            isOnlyNumbers ||
            isSingleWordAndInShortStopList
        );
    });

    return filteredTags.sort((a, b) => a.localeCompare(b));
}


// --- getStaticPaths untuk paginasi ---
export async function getStaticPaths() {
    const allVideosData: VideoData[] = await getAllVideos();
    const sortedTags = filterAndSortTags(allVideosData);

    const totalPages = Math.ceil(sortedTags.length / TAGS_PER_PAGE);

    // Ini akan membuat path seperti /tags/1, /tags/2, dll.
    return Array.from({ length: totalPages }, (_, i) => ({
        params: { page: (i + 1).toString() },
        props: {
            page: i + 1,
            tags: sortedTags.slice(i * TAGS_PER_PAGE, (i + 1) * TAGS_PER_PAGE),
            totalPages: totalPages,
            currentPage: i + 1,
        },
    }));
}


const { tags, totalPages, currentPage } = Astro.props;

const breadcrumbs = [
  { name: 'Home', url: `${url}` },
  { name: 'Semua Tags', url: `${url}/tags/1` },
  { name: `Halaman ${currentPage}` },
];

// Ubah schemaWebPage jika perlu, misalnya tambahkan informasi halaman
const schemaWebPage = {
  "@context": "https://schema.org",
  "@type": "WebPage",
  "url": `${url}/tags/${currentPage}`,
  "name": `Semua Tags - Halaman ${currentPage} - ${nama}`,
  "description": `Jelajahi daftar lengkap tags dan kategori video yang tersedia di ${nama}. Temukan konten favorit Anda berdasarkan topik. Halaman ${currentPage} dari ${totalPages}.`,
  "publisher": {
    "@type": "Organization",
    "name": nama,
    "logo": {
      "@type": "ImageObject",
      "url": `${url}/logo.png`
    }
  },
  "inLanguage": "id-ID",
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": `${url}/tags/${currentPage}`
  }
};

// Pastikan pageKeywords disesuaikan dengan tags yang ada di halaman ini
const pageKeywords = `tags video, daftar tags, ${nama} tags, topik video, genre video, halaman ${currentPage}, ${tags.slice(0, 5).join(', ')}${tags.length > 5 ? ', dll.' : ''}`;

---

<Layout
  title={`Semua Tags Video - Halaman ${currentPage} - ${nama} | Jelajahi Kategori Lengkap`}
  description={`Jelajahi daftar lengkap tags dan kategori video yang tersedia di ${nama}. Temukan konten favorit Anda berdasarkan topik dan genre. Navigasi cepat ke video yang Anda cari. Halaman ${currentPage} dari ${totalPages}.`}
  siteName={nama}
  siteUrl={url}
  keywords={pageKeywords}
>
  <script type="application/ld+json" set:html={JSON.stringify(schemaBreadcrumb)} />
  <script type="application/ld+json" set:html={JSON.stringify(schemaWebPage)} />

  <main class="tags-index-page">
    <nav class="breadcrumb" aria-label="breadcrumb">
      <ol vocab="https://schema.org/" typeof="BreadcrumbList">
        {breadcrumbs.map((item, index) => (
          <li property="itemListElement" typeof="ListItem">
            {index > 0 && <span class="separator" aria-hidden="true">/</span>}
            {item.url ? (
              <a property="item" typeof="WebPage" href={item.url}>
                <span property="name">{item.name}</span>
              </a>
            ) : (
              <span property="name">{item.name}</span>
            )}
            <meta property="position" content={(index + 1).toString()} />
          </li>
        ))}
      </ol>
    </nav>

    <h1 class="page-title">Daftar Lengkap Tags Video di {nama} <small>(Halaman {currentPage} dari {totalPages})</small></h1>

    {tags.length === 0 ? (
      <p class="no-tags-message">
        Tidak ada tags yang ditemukan di halaman ini.
      </p>
    ) : (
      <div class="tags-grid">
        {tags.map(tag => (
          <a href={`${url}/video/${slugify(tag)}/1`} class="tag-card" rel="tag" title={`Lihat semua video dengan tag ${tag}`}>
            {tag}
          </a>
        ))}
      </div>
    )}

    {/* --- Navigasi Paginasi --- */}
    {totalPages > 1 && (
      <nav class="pagination-nav" aria-label="Tag page navigation">
        <ul class="pagination-list">
          {currentPage > 1 && (
            <li class="pagination-item">
              <a href={`${url}/tags/${currentPage - 1}`} class="pagination-link">&larr; Sebelumnya</a>
            </li>
          )}
          {Array.from({ length: totalPages }, (_, i) => i + 1).map(pageNumber => (
            <li class="pagination-item">
              <a
                href={`${url}/tags/${pageNumber}`}
                class={`pagination-link ${pageNumber === currentPage ? 'active' : ''}`}
              >
                {pageNumber}
              </a>
            </li>
          ))}
          {currentPage < totalPages && (
            <li class="pagination-item">
              <a href={`${url}/tags/${currentPage + 1}`} class="pagination-link">Selanjutnya &rarr;</a>
            </li>
          )}
        </ul>
      </nav>
    )}
  </main>
</Layout>